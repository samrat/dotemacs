* Package initialization
#+BEGIN_SRC emacs-lisp
  (require 'package)
    (setq package-archives
          '(("melpa" . "http://melpa.milkbox.net/packages/")
            ("marmalade" . "http://marmalade-repo.org/packages/")
            ("org" . "http://orgmode.org/elpa/")
            ("gnu" . "http://elpa.gnu.org/packages/")))
    (package-initialize)
    
    (when (not package-archive-contents)
      (package-refresh-contents))
    
    (defvar package-list '(better-defaults
                           cider
                           geiser
                           magit
                           paredit
                           idle-highlight-mode
                           auto-complete
                           color-theme-sanityinc-tomorrow
                           rainbow-delimiters
                           auto-complete
                           ac-nrepl
                           ag
                           color-theme-sanityinc-solarized
                           markdown-mode
                           zenburn-theme
                           exec-path-from-shell))
  
    (dolist (p package-list)
      (when (not (package-installed-p p))
        (package-install p)))
#+END_SRC
* General
** Options
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
  (show-paren-mode 1)
  (ido-ubiquitous t)
  (setq ido-auto-merge-work-directories-length -1)
  (column-number-mode)
  
  ;; too lazy to type yes(or no)
  (defalias 'yes-or-no-p 'y-or-n-p)
  
  (exec-path-from-shell-initialize)

  (setq mac-command-key-is-meta t)
  (setq mac-command-modifier 'meta)

  (projectile-global-mode)

  (require 'whitespace-cleanup-mode)
  (setq ido-use-virtual-buffers t)
#+END_SRC
*** Browser
#+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "conkeror")
#+END_SRC
** autocomplete-mode
#+BEGIN_SRC emacs-lisp
  (global-auto-complete-mode t)
  (setq ac-auto-start 3)

  (setq ac-use-menu-map t)
  (setq ac-use-fuzzy t)

#+END_SRC
** Smex
#+BEGIN_SRC emacs-lisp
(setq smex-save-file "~/.emacs.d/.smex-items")
(smex-initialize)
(global-set-key (kbd "M-x") 'smex)
(global-set-key (kbd "M-X") 'smex-major-mode-commands)
#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
  (setq magit-commit-all-when-nothing-staged 'ask)
  (global-set-key (kbd "C-c g") 'magit-status)
#+END_SRC
** GPG
#+BEGIN_SRC emacs-lisp
(setq epg-gpg-program "/usr/bin/gpg")
#+END_SRC
** Text mode
#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook 'turn-on-auto-fill)
(add-hook 'text-mode-hook 'turn-on-flyspell)
#+END_SRC
* Theme
#+BEGIN_SRC emacs-lisp
(powerline-default-theme)

#+END_SRC
** Color theme
#+BEGIN_SRC emacs-lisp
  (load-theme 'sanityinc-tomorrow-night t)
#+END_SRC
** Font
#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil
                         :family "Monaco"
                         :height 140
                         :weight 'normal
                         :width 'normal)
  
     (when (functionp 'set-fontset-font)
     (set-fontset-font "fontset-default"
                       'unicode
                       (font-spec :family "DejaVu Sans Mono"
                                  :width 'normal
                                  :size 12.4
                                  :weight 'normal)))
#+END_SRC

* Start server
#+BEGIN_SRC emacs-lisp
(require 'server)
(unless (server-running-p)
  (server-start))
#+END_SRC
* Functions
** Extra Bindings
#+BEGIN_SRC emacs-lisp
(defun uf/backward-kill-word-or-kill-region (&optional arg)
  "Change C-w behavior"
  (interactive "p")
  (if (region-active-p)
      (kill-region (region-beginning) (region-end))
    (backward-kill-word arg)))

(global-set-key (kbd "C-w") 'uf/backward-kill-word-or-kill-region)
#+END_SRC
** sudo edit
#+BEGIN_SRC emacs-lisp
  (defun sudo-edit (&optional arg)
    "Edit currently visited file as root.

  With a prefix ARG prompt for a file to visit.
  Will also prompt for a file to visit if current
  buffer is not visiting a file."
    (interactive "P")
    (if (or arg (not buffer-file-name))
        (find-file (concat "/sudo:root@localhost:"
                           (ido-read-file-name "Find file(as root): ")))
      (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))

#+END_SRC

* Programming
#+BEGIN_SRC emacs-lisp
  ;; (add-hook 'prog-mode-hook 'idle-highlight-mode)
  (define-key lisp-mode-shared-map (kbd "RET") 'reindent-then-newline-and-indent)
  (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
#+END_SRC

** Clojure
#+BEGIN_SRC emacs-lisp
  (add-hook 'clojure-mode-hook #'enable-paredit-mode)
  (add-hook 'ruby-mode-hook 'whitespace-cleanup-mode)
  (add-to-list 'ac-modes 'clojure-mode)

  (setq nrepl-buffer-name-separator "-"
        nrepl-buffer-name-show-port t
        cider-switch-to-repl-command 'cider-switch-to-current-repl-buffer)
#+END_SRC

*** Cider
#+BEGIN_SRC emacs-lisp
  (add-hook 'cider-mode-hook 'cider-turn-on-eldoc-mode)
  (setq cider-auto-select-error-buffer t)
  
  (add-hook 'cider-repl-mode-hook #'enable-paredit-mode)
  (add-hook 'cider-repl-mode-hook 'rainbow-delimiters-mode)
#+END_SRC
** Emacs lisp
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook #'enable-paredit-mode)
  (add-hook 'emacs-lisp-mode-hook 'whitespace-cleanup-mode)
#+END_SRC
** Racket
#+BEGIN_SRC emacs-lisp
(setq geiser-active-implementations '(racket))
(add-hook 'scheme-mode-hook #'enable-paredit-mode)
#+END_SRC

** SML
#+BEGIN_SRC emacs-lisp
(setenv "PATH" (concat "/usr/lib/smlnj/bin:" (getenv "PATH")))
(setq exec-path (cons "/usr/lib/smlnj/bin"  exec-path))

(defun sml-eval-buffer ()
  "If sml repl exists, then restart it else create a new repl"
  (interactive)
  (when (get-buffer "*sml*")
    (with-current-buffer "*sml*"
      (when (process-live-p "sml")
        (comint-send-eof)))
    (sleep-for 0.2))
  (sml-run "sml" "")
  (sml-prog-proc-load-file buffer-file-name t))

(eval-after-load 'sml-mode
  '(progn
    (define-key sml-mode-map (kbd "C-j") 'reindent-then-newline-and-indent)
    (define-key sml-mode-map (kbd "C-c C-s") 'sml-run)
    (define-key sml-mode-map (kbd "C-c C-v") 'sml-eval-buffer)))
#+END_SRC

** Ruby
#+BEGIN_SRC emacs-lisp
;;(require 'rvm)
;;(rvm-use-default)
#+END_SRC

** Haskell
#+BEGIN_SRC emacs-lisp
  (add-hook 'haskell-mode-hook 'turn-on-haskell-indent)
  
#+END_SRC

*** ghc-mod
#+BEGIN_SRC emacs-lisp
  (autoload 'ghc-init "ghc" nil t)
  (add-hook 'haskell-mode-hook (lambda () (ghc-init)))
#+END_SRC
* Ecstatic
#+BEGIN_SRC emacs-lisp
(defvar blog-dir "/home/samrat/code/samrat.github.com/"
  "Path to blog src")

(defun ecstatic/get-post-file (title)
  "Return the filename for a new post given the TITLE."
  (expand-file-name (format "%s/src/posts/%s-%s.org"
                            blog-dir
                            (format-time-string "%Y-%m-%d")
                            (replace-regexp-in-string "\\W+" "-" (downcase title)))))


(defun ecstatic/new-post (title)
  "Start a new Ecstatic blog post."
  (interactive "MTitle: ")
  (find-file (ecstatic/get-post-file title))
  (insert "#+begin_html\n---\n")
  (insert (format "title: %s\n" title))
  (insert (format-time-string "date: %Y-%m-%dT%H:%M:%SZ\n" nil t))
  (insert (format "tags: \n"))
  (insert "---\n#+end_html\n\n"))

(defun ecstatic/update-date ()
  "Update the YAML date element to the current time."
  (interactive)
  (save-excursion
    (goto-char (point-min))
    (search-forward-regexp "^date: +")
    (kill-line)
    (insert (format-time-string "%Y-%m-%dT%H:%M:%SZ" nil t))))
#+END_SRC
* VC
#+BEGIN_SRC emacs-lisp
(eval-after-load 'diff-mode
  '(progn
     (set-face-foreground 'diff-added "green4")
     (set-face-foreground 'diff-removed "red3")))

(eval-after-load 'magit
  '(progn
     (set-face-foreground 'magit-diff-add "green4")
     (set-face-foreground 'magit-diff-del "red3")))
#+END_SRC

* Org
#+BEGIN_SRC emacs-lisp
  (require 'org-protocol)
  ;; (require 'ox-latex)
  ;; (setq org-directory "~/Dropbox/notes")
  ;; (setq org-agenda-files (list org-directory))

  (setq org-startup-indented t)
  (setq org-startup-folded t)
  (setq org-src-fontify-natively t)
#+END_SRC
** Org keys   
#+BEGIN_SRC emacs-lisp
(define-key global-map "\C-cc" 'org-capture)
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
;;(define-key global-map "\C-cb" 'org-iswitchb)
#+END_SRC
** Org babel
#+BEGIN_SRC emacs-lisp
(require 'ob)
(require 'ob-tangle)
(org-babel-do-load-languages
 'org-babel-load-languages
 '((clojure . t)
   (scheme . t)
   (python . t)
   (sh . t)
   (R . t)
   (haskell . t)))

(setq org-confirm-babel-evaluate nil)
(setq org-src-window-setup 'current-window)

(setq org-babel-default-header-args
      '((:session . "none")
        (:results . "replace")
        (:exports . "code")
        (:cache . "no")
        (:noweb . "yes")
        (:hlines . "no")
        (:tangle . "no")
        (:padnewline . "yes")))
#+END_SRC
** Capture templates
#+BEGIN_SRC emacs-lisp
(setq org-capture-templates
      '(("t" "Todo" entry (file+headline "todo.org" "Unsorted") "* TODO %i%?")
        ("n" "Notes" entry (file+headline "notes.org" "Notes") "** %? ")
        ("j" "Journal" entry (file+datetree "journal.org") "* %i%?")
        ("C" "Coursera" entry (file+headline "samrat.org" "Coursera")
         "* NEXT %?%a\n  :PROPERTIES:\n  :CAPTURED: %U\n  :END:\n\n%i" :prepend t)
        ("w" "Default template"
          entry
          (file+headline "~/notes/samrat.org" "Bookmarks")
          "* %c\n %u\n\n  %i")))
#+END_SRC
*** Org protocol
#+BEGIN_SRC emacs-lisp
  (defun org-protocol-capture-and-finalize (info)
    "Like org-protocol-capture, but finalizes capture."
    (if (and (boundp 'org-stored-links)
             (progn (org-protocol-do-capture info)
                    (org-capture-finalize)))
        (message "Item captured."))
    nil)

  (setq org-protocol-protocol-alist
               '(("bookmark"
                  :protocol "bookmark"
                  :function org-protocol-capture-and-finalize)))

#+END_SRC
