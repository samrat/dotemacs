* Package initialization
#+BEGIN_SRC emacs-lisp
  (require 'package)
    (setq package-archives
          '(("melpa" . "http://melpa.milkbox.net/packages/")
            ("marmalade" . "http://marmalade-repo.org/packages/")
            ("org" . "http://orgmode.org/elpa/")
            ("gnu" . "http://elpa.gnu.org/packages/")))
    (package-initialize)
    
    (when (not package-archive-contents)
      (package-refresh-contents))
    
    (defvar package-list '(better-defaults
                           smex
                           cider
                           geiser
                           magit
                           paredit
                           idle-highlight-mode
                           ido-ubiquitous
                           auto-complete
                           company
                           color-theme-sanityinc-tomorrow
                           rainbow-delimiters
                           ac-nrepl
                           ag
                           color-theme-sanityinc-solarized
                           markdown-mode
                           zenburn-theme
                           spacegray-theme
                           projectile
                           whitespace-cleanup-mode
                           exec-path-from-shell))

    (dolist (p package-list)
      (when (not (package-installed-p p))
        (package-install p)))
#+END_SRC
* General
** Options
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
  (show-paren-mode 1)
  (ido-ubiquitous t)
  (setq ido-auto-merge-work-directories-length -1)
  (column-number-mode)
  
  ;; too lazy to type yes(or no)
  (defalias 'yes-or-no-p 'y-or-n-p)
  
  (exec-path-from-shell-initialize)

  (setq mac-command-key-is-meta t)
  (setq mac-command-modifier 'meta)

  (projectile-global-mode)

  (require 'whitespace-cleanup-mode)
  (setq ido-use-virtual-buffers t)
  ;; To fix weird Emacs pasteboard error
  (setq save-interprogram-paste-before-kill nil)
#+END_SRC
** autocomplete-mode
#+BEGIN_SRC emacs-lisp
  (global-auto-complete-mode t)
  (setq ac-auto-start 3)

  (setq ac-use-menu-map t)
  (setq ac-use-fuzzy t)

#+END_SRC
** Smex
#+BEGIN_SRC emacs-lisp
(setq smex-save-file "~/.emacs.d/.smex-items")
(smex-initialize)
(global-set-key (kbd "M-x") 'smex)
(global-set-key (kbd "M-X") 'smex-major-mode-commands)
#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
  (setq magit-commit-all-when-nothing-staged 'ask)
  (global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC
** GPG
#+BEGIN_SRC emacs-lisp
(setq epg-gpg-program "/usr/bin/gpg")
#+END_SRC
** Text mode
#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook 'turn-on-auto-fill)
(add-hook 'text-mode-hook 'turn-on-flyspell)
#+END_SRC
** God mode
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<escape>") 'god-mode-all)
  
  (defun god-mode-update-cursor ()
    (let ((limited-colors-p (> 257 (length (defined-colors)))))
      (cond (god-local-mode (progn
                              (set-face-background 'mode-line (if limited-colors-p "white" "#551a8b"))
                              (set-face-background 'mode-line-inactive (if limited-colors-p "white" "#551a8b"))))
            (t (progn
                 (set-face-background 'mode-line (if limited-colors-p "black" "#0a2832"))
                 (set-face-background 'mode-line-inactive (if limited-colors-p "black" "#0a2832")))))))
  
  (add-hook 'god-mode-enabled-hook 'god-mode-update-cursor)
  (add-hook 'god-mode-disabled-hook 'god-mode-update-cursor)
  
#+END_SRC
* Theme
** Color theme
#+BEGIN_SRC emacs-lisp
  (load-theme 'spacegray t)
#+END_SRC
** Font
#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil
                      :family "Inconsolata"
                      :height 120
                      :weight 'normal
                      :width 'normal)
  
  (when (functionp 'set-fontset-font)
    (set-fontset-font "fontset-default"
                      'unicode
                      (font-spec :family "DejaVu Sans Mono"
                                 :width 'normal
                                 :size 12.4
                                 :weight 'normal)))
#+END_SRC

* Start server
#+BEGIN_SRC emacs-lisp
(require 'server)
(unless (server-running-p)
  (server-start))
#+END_SRC
* Functions
** Extra Bindings
#+BEGIN_SRC emacs-lisp
(defun uf/backward-kill-word-or-kill-region (&optional arg)
  "Change C-w behavior"
  (interactive "p")
  (if (region-active-p)
      (kill-region (region-beginning) (region-end))
    (backward-kill-word arg)))

(global-set-key (kbd "C-w") 'uf/backward-kill-word-or-kill-region)
#+END_SRC
** sudo edit
#+BEGIN_SRC emacs-lisp
  (defun sudo-edit (&optional arg)
    "Edit currently visited file as root.

  With a prefix ARG prompt for a file to visit.
  Will also prompt for a file to visit if current
  buffer is not visiting a file."
    (interactive "P")
    (if (or arg (not buffer-file-name))
        (find-file (concat "/sudo:root@localhost:"
                           (ido-read-file-name "Find file(as root): ")))
      (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))

#+END_SRC

* Programming
#+BEGIN_SRC emacs-lisp
  ;; (add-hook 'prog-mode-hook 'idle-highlight-mode)
  (define-key lisp-mode-shared-map (kbd "RET") 'reindent-then-newline-and-indent)
  (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
#+END_SRC

** Clojure
#+BEGIN_SRC emacs-lisp
  (add-hook 'clojure-mode-hook #'enable-paredit-mode)
  (add-hook 'clojure-mode-hook 'whitespace-cleanup-mode)
  
  (setq nrepl-buffer-name-separator "-"
        nrepl-buffer-name-show-port t
        cider-switch-to-repl-command 'cider-switch-to-current-repl-buffer)
#+END_SRC

*** Cider
#+BEGIN_SRC emacs-lisp
  (add-hook 'cider-mode-hook 'cider-turn-on-eldoc-mode)
  (setq cider-auto-select-error-buffer t)
  
  (add-hook 'cider-repl-mode-hook #'enable-paredit-mode)
  (add-hook 'cider-repl-mode-hook 'rainbow-delimiters-mode)
#+END_SRC

*** ac-nrepl
#+BEGIN_SRC emacs-lisp
  (add-hook 'cider-repl-mode-hook 'company-mode)
  (add-hook 'cider-mode-hook 'company-mode)
  
  ;; (add-hook 'clojure-mode-hook 'company-mode)
  (add-hook 'cider-mode-hook (lambda ()
                               (local-set-key (kbd "TAB") 'company-complete)))
#+END_SRC
** Emacs lisp
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook #'enable-paredit-mode)
  (add-hook 'emacs-lisp-mode-hook 'whitespace-cleanup-mode)
  (add-hook 'emacs-lisp-mode-hook 'company-mode)
#+END_SRC
** Racket
#+BEGIN_SRC emacs-lisp
(setq geiser-active-implementations '(racket))
(add-hook 'scheme-mode-hook #'enable-paredit-mode)
#+END_SRC

** SML
#+BEGIN_SRC emacs-lisp
(setenv "PATH" (concat "/usr/lib/smlnj/bin:" (getenv "PATH")))
(setq exec-path (cons "/usr/lib/smlnj/bin"  exec-path))

(defun sml-eval-buffer ()
  "If sml repl exists, then restart it else create a new repl"
  (interactive)
  (when (get-buffer "*sml*")
    (with-current-buffer "*sml*"
      (when (process-live-p "sml")
        (comint-send-eof)))
    (sleep-for 0.2))
  (sml-run "sml" "")
  (sml-prog-proc-load-file buffer-file-name t))

(eval-after-load 'sml-mode
  '(progn
    (define-key sml-mode-map (kbd "C-j") 'reindent-then-newline-and-indent)
    (define-key sml-mode-map (kbd "C-c C-s") 'sml-run)
    (define-key sml-mode-map (kbd "C-c C-v") 'sml-eval-buffer)))
#+END_SRC

** OCaml
#+BEGIN_SRC emacs-lisp
  ;; Setup environment variables using opam
  (dolist (var (car (read-from-string (shell-command-to-string "opam config env --sexp"))))
    (setenv (car var) (cadr var)))
  
  ;; Update the emacs path
  (setq exec-path (split-string (getenv "PATH") path-separator))
  
  ;; Update the emacs load path
  (push (concat (getenv "OCAML_TOPLEVEL_PATH") "/../../share/emacs/site-lisp") load-path)
  
  ;; Automatically load utop.el
  (autoload 'utop "utop" "Toplevel for OCaml" t)
  
  
  (autoload 'utop-setup-ocaml-buffer "utop" "Toplevel for OCaml" t)
  (add-hook 'tuareg-mode-hook 'utop-setup-ocaml-buffer)
  (add-hook 'tuareg-mode-hook 'merlin-mode)
  (add-hook 'typerex-mode-hook 'utop-setup-ocaml-buffer)
#+END_SRC
** Ruby
#+BEGIN_SRC emacs-lisp
;;(require 'rvm)
;;(rvm-use-default)
#+END_SRC

** Haskell
#+BEGIN_SRC emacs-lisp
  (add-hook 'haskell-mode-hook 'turn-on-haskell-indentation)
  (add-hook 'haskell-mode-hook 'whitespace-cleanup-mode)
#+END_SRC

*** ghc-mod
#+BEGIN_SRC emacs-lisp
  (autoload 'ghc-init "ghc" nil t)
  (add-hook 'haskell-mode-hook (lambda () (ghc-init)))
#+END_SRC
* Ecstatic
#+BEGIN_SRC emacs-lisp
  (defvar blog-dir "/Users/samrat/code/samrat.github.com/"
    "Path to blog src")
  
  (defun ecstatic/get-post-file (title)
    "Return the filename for a new post given the TITLE."
    (expand-file-name (format "%s/src/posts/%s-%s.md"
                              blog-dir
                              (format-time-string "%Y-%m-%d")
                              (replace-regexp-in-string "\\W+" "-" (downcase title)))))
  
  
  (defun ecstatic/new-post (title)
    "Start a new Ecstatic blog post."
    (interactive "MTitle: ")
    (find-file (ecstatic/get-post-file title))
    (insert "---\n")
    (insert (format "title: %s\n" title))
    (insert (format-time-string "date: %Y-%m-%dT%H:%M:%SZ\n" nil t))
    (insert (format "tags: \n"))
    (insert "---\n\n"))
  
  (defun ecstatic/update-date ()
    "Update the YAML date element to the current time."
    (interactive)
    (save-excursion
      (goto-char (point-min))
      (search-forward-regexp "^date: +")
      (kill-line)
      (insert (format-time-string "%Y-%m-%dT%H:%M:%SZ" nil t))))
#+END_SRC
* VC
#+BEGIN_SRC emacs-lisp
(eval-after-load 'diff-mode
  '(progn
     (set-face-foreground 'diff-added "green4")
     (set-face-foreground 'diff-removed "red3")))

(eval-after-load 'magit
  '(progn
     (set-face-foreground 'magit-diff-add "green4")
     (set-face-foreground 'magit-diff-del "red3")))
#+END_SRC

* Org
#+BEGIN_SRC emacs-lisp
  (require 'org-protocol)
  ;; (require 'ox-latex)
  ;; (setq org-directory "~/Dropbox/notes")
  ;; (setq org-agenda-files (list org-directory))

  (setq org-startup-indented t)
  (setq org-startup-folded t)
  (setq org-src-fontify-natively t)
#+END_SRC
** Org keys   
#+BEGIN_SRC emacs-lisp
(define-key global-map "\C-cc" 'org-capture)
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
;;(define-key global-map "\C-cb" 'org-iswitchb)
#+END_SRC
** Org babel
#+BEGIN_SRC emacs-lisp
(require 'ob)
(require 'ob-tangle)
(org-babel-do-load-languages
 'org-babel-load-languages
 '((clojure . t)
   (scheme . t)
   (python . t)
   (sh . t)
   (R . t)
   (haskell . t)))

(setq org-confirm-babel-evaluate nil)
(setq org-src-window-setup 'current-window)

(setq org-babel-default-header-args
      '((:session . "none")
        (:results . "replace")
        (:exports . "code")
        (:cache . "no")
        (:noweb . "yes")
        (:hlines . "no")
        (:tangle . "no")
        (:padnewline . "yes")))
#+END_SRC
** Capture templates
#+BEGIN_SRC emacs-lisp
(setq org-capture-templates
      '(("t" "Todo" entry (file+headline "todo.org" "Unsorted") "* TODO %i%?")
        ("n" "Notes" entry (file+headline "notes.org" "Notes") "** %? ")
        ("j" "Journal" entry (file+datetree "journal.org") "* %i%?")
        ("C" "Coursera" entry (file+headline "samrat.org" "Coursera")
         "* NEXT %?%a\n  :PROPERTIES:\n  :CAPTURED: %U\n  :END:\n\n%i" :prepend t)
        ("w" "Default template"
          entry
          (file+headline "~/notes/samrat.org" "Bookmarks")
          "* %c\n %u\n\n  %i")))
#+END_SRC
*** Org protocol
#+BEGIN_SRC emacs-lisp
  (defun org-protocol-capture-and-finalize (info)
    "Like org-protocol-capture, but finalizes capture."
    (if (and (boundp 'org-stored-links)
             (progn (org-protocol-do-capture info)
                    (org-capture-finalize)))
        (message "Item captured."))
    nil)

  (setq org-protocol-protocol-alist
               '(("bookmark"
                  :protocol "bookmark"
                  :function org-protocol-capture-and-finalize)))

#+END_SRC
* ERC
#+BEGIN_SRC emacs-lisp
  (setq erc-hide-list '("JOIN" "PART" "QUIT"))
#+END_SRC
* Feeds
#+BEGIN_SRC emacs-lisp
  (require 'elfeed)
  
  (setq elfeed-feeds
        '("http://nullprogram.com/feed/"
          "http://www.terminally-incoherent.com/blog/feed/"
          "http://samrat.me/feeds/all.xml"
          ("http://planet.clojure.in/atom.xml" planet)
          "http://swizec.com/blog/feed/atom"
          "http://lucumr.pocoo.org/feed.atom"
          "http://worrydream.com/feed.xml"
          "http://briancarper.net/feed"
          "http://clojurefun.wordpress.com/feed/"
          "http://feeds.feedburner.com/codinghorror/"
          "http://danariely.com/feed/"
          "http://feed.dilbert.com/dilbert/blog"
          "http://www.eflorenzano.com/blog/feeds/all/"
          "http://www.exampler.com/blog/"
          "http://feeds.feedburner.com/feross"
          "http://blog.dscpl.com.au/feeds/posts/default"
          "http://www.hackwriting.com/feed/"
          "http://www.jeffwofford.com/?feed=rss2"
          "http://lethain.com/feeds/all/"
          "http://www.willmcgugan.com/feed/"
          "http://blog.jgc.org/feeds/posts/default"
          "http://www.joelonsoftware.com/rss.xml"
          "http://www.josscrowcroft.com/feed/"
          "http://markos.gaivo.net/blog/?feed=rss2"
          "http://feeds.feedburner.com/DavidCramernet"
          "http://karlmendes.com/feed/"
          "http://kennethreitz.com/feeds/all.atom.xml"
          "http://www.loper-os.org/?feed=rss2"
          "http://jeremykun.com/feed/"
          "http://biditacharya.wordpress.com/feed/"
          "http://mattgemmell.com/atom.xml"
          "http://matt.might.net/articles/feed.rss"
          "http://blog.mixu.net/feed/"
          "http://www.morethanseven.net/articles.atom"
          "http://www.mostly-decidable.org/feeds/posts/default"
          "http://normansoven.com/feed/"
          "http://paulbuchheit.blogspot.com/feeds/posts/default"
          "http://paulrouget.com/index.xml"
          "http://feeds.feedburner.com/philippbosch"
          "http://allendowney.blogspot.com/feeds/posts/default"
          "http://reminiscential.wordpress.com/feed/"
          "http://www.sciten.com/rss"
          "http://feeds.feedburner.com/techoctave"
          "http://simplebits.com/feed/"
          "http://slacy.com/blog/feed/"
          "http://feeds2.feedburner.com/stevelosh"
          "http://steve-yegge.blogspot.com/atom.xml"
          "http://sympodial.com/rss"
          "http://technomancy.us/feed/atom.xml"
          "http://thadeusb.com/feed.atom"
          "http://feeds.feedburner.com/JasonShen"
          "http://feeds.feedburner.com/b-list-entries"
          "http://www.johndcook.com/blog/feed/"
          "http://blog.thelifeofkenneth.com/feeds/posts/default"
          "http://feeds.feedburner.com/ThomasPelletier"
          "http://feeds2.feedburner.com/UnderstandingUncertainty"
          "http://feeds.feedburner.com/Vijaykirancom"
          "http://devblog.avdi.org/feed/"
          "http://waxy.org/index.xml"
          "http://terrytao.wordpress.com/feed/"
          "http://www.wisdomandwonder.com/feed"
          "http://feeds.feedburner.com/holman"
          "http://feeds.feedburner.com/ideolalia/zXGt"
          "http://hobershort.wordpress.com/feed/"
          "http://lemire.me/blog/feed/"
          ;; "http://antirez.com/rss"
          "http://feeds.feedburner.com/ChrisGranger"
          "http://gladwell.typepad.com/gladwellcom/atom.xml"
          "http://feeds.feedburner.com/catonmat"
          "http://ignorethecode.net/blog/rss/"
          "http://feeds.feedburner.com/miraculous"
          "http://prog21.dadgum.com/atom.xml"
          "http://feeds.feedburner.com/rdegges"
          "http://semilshah.wordpress.com/feed/"
          "http://feeds.feedburner.com/SimpleBadLuck"
          "http://feeds.feedburner.com/zachwill"
          "http://lesswrong.com/wiki/Homepage/.rss"
          "http://feeds.feedburner.com/Betterexplained"
          "http://www.commandlinefu.com/feed/tenup"
          "http://www.learningclojure.com/feeds/posts/default"
          "http://programmingpraxis.com/feed/"
          "http://feeds.feedburner.com/thechangelog"
          "http://whattheemacsd.com/atom.xml"
          "http://isbullsh.it/rss.xml"
          "http://feeds.feedburner.com/sl4m"
          "http://feeds.feedburner.com/TomMoertelsBlog"
          ("http://planet.haskell.org/atom.xml" planet)
          "http://spencertipping.com/feed.atom"
          "http://smyck.net/feed/"
          "http://arrdem.com/feeds/index.xml"
          "http://chrisdone.com/rss.xml"
          "http://blog.empathybox.com/rss"
          "http://what-if.xkcd.com/feed.atom"
          "http://raganwald.com/atom.xml"
          "http://www.gabrielweinberg.com/blog/atom.xml"
          "http://feeds.feedburner.com/ezyang"
          "http://hackingdistributed.com/hackingdistributed.atom"
          "http://www.chrisstucchio.com/blog/atom.xml"
          "http://feeds.feedburner.com/TheGeomblog"
          "http://blog.regehr.org/feed"
          "http://matt-welsh.blogspot.com/feeds/posts/default"
          "http://www.mdswanson.com/atom.xml"
          ("http://www.smbc-comics.com/rss.php" comic)
          ("http://xkcd.com/atom.xml" comic)
          ("http://feeds.feedburner.com/Explosm" comic)
          ;; ("http://wingolog.org/feed/atom" blog)
          ("http://rjlipton.wordpress.com/feed" blog compsci)
          ("http://mybiasedcoin.blogspot.com/feeds/posts/default" blog compsci)
          ("http://agtb.wordpress.com/feed/" blog)
          ("http://www.scottaaronson.com/blog/?feed=rss2" blog compsci)
          ("http://blog.nullspace.io/feed.xml" blog)
          ("http://jozefg.bitbucket.org/rss.xml" blog)
          ("http://www.paperplanes.de/rss.xml" blog)
          ("http://adit.io/rss.xml" blog)
          ("http://www.yosefk.com/blog/feed" blog)
          ("http://jvns.ca/atom.xml" blog)
          ("http://stilldrinking.org/rss/feed.xml" blog)
          ("http://byorgey.wordpress.com/feed/" blog)
          ("http://feeds.feedburner.com/CartesianClosedComic" comic)
          ("http://lkuper.github.io/atom.xml" blog)
          ("http://www.datagenetics.com/feed/rss.xml" blog)
          ("http://bit-player.org/feed" blog)
          ("https://www.schneier.com/blog/atom.xml" blog)
          ("http://austingwalters.com/feed/" blog)
          ("http://fishbowl.pastiche.org/atom.xml" blog)
          ("http://blog.vivekhaldar.com/rss" blog)
          ("http://simblob.blogspot.com/feeds/posts/default" blog)
          ("http://eugene-wei.squarespace.com/blog?format=rss" blog)
          ("http://fgiesen.wordpress.com/feed/" blog)
          ("http://wavefunction.fieldofscience.com/feeds/posts/default" blog)
          ("http://mollyrocket.com/casey/stream_atom.rss" blog)
          ("http://www.reddit.com/domain/samrat.me.rss" reddit myself)
          ("http://kaygun.tumblr.com/rss" blog)
          ("http://langster1980.blogspot.com/feeds/posts/default" blog)
          ("http://robertoconcerto.blogspot.com/feeds/posts/default" blog)
          ("http://cbloomrants.blogspot.com/feeds/3907587030330198720/comments/default" blog)))
#+END_SRC
