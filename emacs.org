* Package initialization
#+BEGIN_SRC emacs-lisp
  (require 'package)
    (setq package-archives
          '(("melpa" . "https://stable.melpa.org/packages/")
            ("marmalade" . "http://marmalade-repo.org/packages/")
            ("org" . "http://orgmode.org/elpa/")
            ("gnu" . "http://elpa.gnu.org/packages/")))
    (package-initialize)
    
    (when (not package-archive-contents)
      (package-refresh-contents))
    
    (defvar package-list '(better-defaults
                           smex
                           cider
                           geiser
                           magit
                           paredit
                           idle-highlight-mode
                           auto-complete
                           company
                           color-theme-sanityinc-tomorrow
                           rainbow-delimiters
                           rg
                           color-theme-sanityinc-solarized
                           markdown-mode
                           zenburn-theme
                           projectile
                           whitespace-cleanup-mode
                           exec-path-from-shell
                           function-args
                           ggtags
                           keychain-environment))

    (dolist (p package-list)
      (when (not (package-installed-p p))
        (package-install p)))
#+END_SRC
* General
** Options
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
  (show-paren-mode 1)
  (display-time-mode 1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (setq ido-auto-merge-work-directories-length -1)
  (column-number-mode)
  (setq visible-bell nil)

  ;; too lazy to type yes(or no)
  (defalias 'yes-or-no-p 'y-or-n-p)

  (exec-path-from-shell-initialize)

  (setq mac-command-key-is-meta t)
  (setq mac-command-modifier 'meta)

  (projectile-mode +1)
  (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)

  (global-display-line-numbers-mode)

  (require 'whitespace-cleanup-mode)
  (setq ido-use-virtual-buffers t)
  ;; To fix weird Emacs pasteboard error
  (setq save-interprogram-paste-before-kill nil)

  ;; meaningful names for buffers with the same name
  ;; from prelude
  ;; https://github.com/bbatsov/prelude
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'forward)
  (setq uniquify-separator "/")
  (setq uniquify-after-kill-buffer-p t)    ; rename after killing uniquified
  (setq uniquify-ignore-buffers-re "^\\*") ; don't muck with special buffers

#+END_SRC
** autocomplete-mode
#+BEGIN_SRC emacs-lisp
  (global-auto-complete-mode t)
  (setq ac-auto-start 3)

  (setq ac-use-menu-map t)
  (setq ac-use-fuzzy t)

#+END_SRC
** Smex
#+BEGIN_SRC emacs-lisp
(setq smex-save-file "~/.emacs.d/.smex-items")
(smex-initialize)
(global-set-key (kbd "M-x") 'smex)
(global-set-key (kbd "M-X") 'smex-major-mode-commands)
#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
  (setq magit-commit-all-when-nothing-staged 'ask)
  (global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC
** GPG
#+BEGIN_SRC emacs-lisp
(setq epg-gpg-program "/usr/bin/gpg")
#+END_SRC
** Text mode
#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook 'turn-on-auto-fill)
(add-hook 'text-mode-hook 'turn-on-flyspell)
#+END_SRC
** Load Keychain environment vars
To avoid having to type in SSH passphrase
#+BEGIN_SRC emacs-lisp
(keychain-refresh-environment)
#+END_SRC
* Theme
** Color theme
#+BEGIN_SRC emacs-lisp
  (load-theme 'zenburn t)
#+END_SRC
** Font
#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil
                      :family "Inconsolata"
                      :height 150
                      :weight 'normal
                      :width 'normal)
  
  (when (functionp 'set-fontset-font)
    (set-fontset-font "fontset-default"
                      'unicode
                      (font-spec :family "DejaVu Sans Mono"
                                 :width 'normal
                                 :size 12.4
                                 :weight 'normal)))
#+END_SRC

* Start server
#+BEGIN_SRC emacs-lisp
(require 'server)
(unless (server-running-p)
  (server-start))
#+END_SRC
* Functions
** Extra Bindings
#+BEGIN_SRC emacs-lisp
(defun uf/backward-kill-word-or-kill-region (&optional arg)
  "Change C-w behavior"
  (interactive "p")
  (if (region-active-p)
      (kill-region (region-beginning) (region-end))
    (backward-kill-word arg)))

(global-set-key (kbd "C-w") 'uf/backward-kill-word-or-kill-region)
#+END_SRC
** sudo edit
#+BEGIN_SRC emacs-lisp
  (defun sudo-edit (&optional arg)
    "Edit currently visited file as root.

  With a prefix ARG prompt for a file to visit.
  Will also prompt for a file to visit if current
  buffer is not visiting a file."
    (interactive "P")
    (if (or arg (not buffer-file-name))
        (find-file (concat "/sudo:root@localhost:"
                           (ido-read-file-name "Find file(as root): ")))
      (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))

#+END_SRC

* Programming
#+BEGIN_SRC emacs-lisp
  ;; (add-hook 'prog-mode-hook 'idle-highlight-mode)
  (define-key lisp-mode-shared-map (kbd "RET") 'reindent-then-newline-and-indent)
  (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
#+END_SRC

** C
#+BEGIN_SRC emacs-lisp
  (add-hook 'c-mode-hook 'whitespace-cleanup-mode)
  (add-hook 'c-mode-hook
            (lambda ()
              (define-key c-mode-base-map (kbd "C-c C-k") 'compile)
              (define-key c-mode-base-map (kbd "C-c C-j") 'moo-jump-local)))
#+END_SRC


** Clojure
#+BEGIN_SRC emacs-lisp
  (add-hook 'clojure-mode-hook #'enable-paredit-mode)
  (add-hook 'clojure-mode-hook 'whitespace-cleanup-mode)
  
  (setq nrepl-buffer-name-separator "-"
        nrepl-buffer-name-show-port t
        cider-switch-to-repl-command 'cider-switch-to-current-repl-buffer)
#+END_SRC

*** Cider
#+BEGIN_SRC emacs-lisp
  ;; (add-hook 'cider-mode-hook 'cider-turn-on-eldoc-mode)
  (setq cider-auto-select-error-buffer t)
  
  (add-hook 'cider-repl-mode-hook #'enable-paredit-mode)
  (add-hook 'cider-repl-mode-hook 'rainbow-delimiters-mode)
#+END_SRC
** Emacs lisp
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook #'enable-paredit-mode)
  (add-hook 'emacs-lisp-mode-hook 'whitespace-cleanup-mode)
  (add-hook 'emacs-lisp-mode-hook 'company-mode)
#+END_SRC
** Common Lisp
Enable paredit
#+BEGIN_SRC emacs-lisp
  (add-hook 'lisp-mode-hook #'enable-paredit-mode)
#+END_SRC
#+BEGIN_SRC emacs-lisp
 (setq inferior-lisp-program "/usr/bin/sbcl")
 (setq slime-contribs '(slime-fancy))
#+END_SRC
** Racket
#+BEGIN_SRC emacs-lisp
(setq geiser-active-implementations '(racket))
(add-hook 'scheme-mode-hook #'enable-paredit-mode)
#+END_SRC

Racket REPL sometimes goes into read-only mode
#+BEGIN_SRC emacs-lisp
  (setq geiser-repl-read-only-prompt-p nil)
#+END_SRC
** SML
#+BEGIN_SRC emacs-lisp
(setenv "PATH" (concat "/usr/lib/smlnj/bin:" (getenv "PATH")))
(setq exec-path (cons "/usr/lib/smlnj/bin"  exec-path))

(defun sml-eval-buffer ()
  "If sml repl exists, then restart it else create a new repl"
  (interactive)
  (when (get-buffer "*sml*")
    (with-current-buffer "*sml*"
      (when (process-live-p "sml")
        (comint-send-eof)))
    (sleep-for 0.2))
  (sml-run "sml" "")
  (sml-prog-proc-load-file buffer-file-name t))

(eval-after-load 'sml-mode
  '(progn
    (define-key sml-mode-map (kbd "C-j") 'reindent-then-newline-and-indent)
    (define-key sml-mode-map (kbd "C-c C-s") 'sml-run)
    (define-key sml-mode-map (kbd "C-c C-v") 'sml-eval-buffer)))
#+END_SRC

** OCaml
#+BEGIN_SRC emacs-lisp
  ;; Setup environment variables using opam
  ;; (dolist (var (car (read-from-string (shell-command-to-string "opam config env --sexp"))))
  ;;   (setenv (car var) (cadr var)))

  ;; ;; Update the emacs path
  ;; (setq exec-path (split-string (getenv "PATH") path-separator))

  ;; ;; Update the emacs load path
  ;; (push (concat (getenv "OCAML_TOPLEVEL_PATH") "/../../share/emacs/site-lisp") load-path)

  ;; ;; Automatically load utop.el
  ;; (autoload 'utop "utop" "Toplevel for OCaml" t)


  ;; (autoload 'utop-setup-ocaml-buffer "utop" "Toplevel for OCaml" t)
  ;; (add-hook 'tuareg-mode-hook 'utop-setup-ocaml-buffer)
  ;; (add-hook 'tuareg-mode-hook 'merlin-mode)
  ;; (add-hook 'typerex-mode-hook 'utop-setup-ocaml-buffer)
#+END_SRC
** Ruby
#+BEGIN_SRC emacs-lisp
;;(require 'rvm)
;;(rvm-use-default)
#+END_SRC

** Haskell
#+BEGIN_SRC emacs-lisp
  (add-hook 'haskell-mode-hook 'turn-on-haskell-indentation)
  (add-hook 'haskell-mode-hook 'whitespace-cleanup-mode)
#+END_SRC

*** ghc-mod
#+BEGIN_SRC emacs-lisp
  (autoload 'ghc-init "ghc" nil t)
  (add-hook 'haskell-mode-hook (lambda () (ghc-init)))
#+END_SRC
** Rust
#+BEGIN_SRC emacs-lisp
  (add-hook 'rust-mode-hook #'racer-mode)
  (add-hook 'racer-mode-hook #'eldoc-mode)
  (add-hook 'rust-mode-hook #'flycheck-rust-setup)
#+END_SRC
* Ecstatic
#+BEGIN_SRC emacs-lisp
  (defvar blog-dir "/Users/samrat/code/samrat.github.com/"
    "Path to blog src")
  
  (defun ecstatic/get-post-file (title)
    "Return the filename for a new post given the TITLE."
    (expand-file-name (format "%s/src/posts/%s-%s.md"
                              blog-dir
                              (format-time-string "%Y-%m-%d")
                              (replace-regexp-in-string "\\W+" "-" (downcase title)))))
  
  
  (defun ecstatic/new-post (title)
    "Start a new Ecstatic blog post."
    (interactive "MTitle: ")
    (find-file (ecstatic/get-post-file title))
    (insert "---\n")
    (insert (format "title: %s\n" title))
    (insert (format-time-string "date: %Y-%m-%dT%H:%M:%SZ\n" nil t))
    (insert (format "tags: \n"))
    (insert "---\n\n"))
  
  (defun ecstatic/update-date ()
    "Update the YAML date element to the current time."
    (interactive)
    (save-excursion
      (goto-char (point-min))
      (search-forward-regexp "^date: +")
      (kill-line)
      (insert (format-time-string "%Y-%m-%dT%H:%M:%SZ" nil t))))
#+END_SRC
* ggtags
#+BEGIN_SRC emacs-lisp
(add-hook 'c-mode-common-hook
          (lambda ()
            (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
              (ggtags-mode 1))))

#+END_SRC
* VC
#+BEGIN_SRC emacs-lisp
  (eval-after-load 'diff-mode
    '(progn
       (set-face-foreground 'diff-added "green4")
       (set-face-foreground 'diff-removed "red3")))
#+END_SRC

* Unicode
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c i f") "⊥")
  (global-set-key (kbd "C-c i l") "λ")
  (global-set-key (kbd "C-c i c") "∧")
  (global-set-key (kbd "C-c i d") "∨")
  (global-set-key (kbd "C-c i n") "¬")
#+END_SRC
* Org
#+BEGIN_SRC emacs-lisp
  (require 'org-protocol)
  ;; (require 'ox-latex)
  ;; (setq org-directory "~/Dropbox/notes")
  ;; (setq org-agenda-files (list org-directory))

  (setq org-startup-indented t)
  (setq org-startup-folded t)
  (setq org-src-fontify-natively t)

  (setq-default anki-editor-use-math-jax t)
  (require 'anki-editor)

  (eval-after-load 'org
    '(setf org-highlight-latex-and-related '(latex)))
#+END_SRC
** Org keys   
#+BEGIN_SRC emacs-lisp
(define-key global-map "\C-cc" 'org-capture)
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
;;(define-key global-map "\C-cb" 'org-iswitchb)
#+END_SRC
** Org babel
#+BEGIN_SRC emacs-lisp
(require 'ob)
(require 'ob-tangle)
(org-babel-do-load-languages
 'org-babel-load-languages
 '((clojure . t)
   (scheme . t)
   (python . t)
   (R . t)
   (haskell . t)))

(setq org-confirm-babel-evaluate nil)
(setq org-src-window-setup 'current-window)

(setq org-babel-default-header-args
      '((:session . "none")
        (:results . "replace")
        (:exports . "code")
        (:cache . "no")
        (:noweb . "yes")
        (:hlines . "no")
        (:tangle . "no")
        (:padnewline . "yes")))
#+END_SRC
